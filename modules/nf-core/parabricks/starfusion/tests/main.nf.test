nextflow_process {

    name "Test Process PARABRICKS_STARFUSION"
    script "../main.nf"
    process "PARABRICKS_STARFUSION"

    tag "gpu"
    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/starfusion"

    setup {

        run("STAR_GENOMEGENERATE") {
            script "../../../star/genomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("homo_sapiens") {

        config "./nextflow.config"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = "${STAR_GENOMEGENERATE.out.index}/Chimeric.out.junction"
				input[1] = STAR_GENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = "${STAR_GENOMEGENERATE.out.index}/Chimeric.out.junction"
				input[1] = STAR_GENOMEGENERATE.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

}
