nextflow_process {

    name "Test Process PARABRICKS_STARFUSION"
    script "../main.nf"
    process "PARABRICKS_STARFUSION"

    tag "gpu"
    tag "modules"
    tag "star/align"
    tag "star/genomegenerate"
    tag "starfusion/build"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/starfusion"

    setup {

        run("STAR_GENOMEGENERATE") {
            script "../../../star/genomegenerate/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome_fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.fa')
                ]
                input[1] = [
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ]
                """
            }
        }

        run("STAR_ALIGN") {
            script "../../../star/align/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        run("STARFUSION_BUILD"){
            script "../../../starfusion/build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome_fasta' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.fa')
                ]
                input[1] = [
                    [ id:'minigenome_gtf' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/minigenome.gtf')
                ]
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/CTAT_HumanFusionLib.mini.dat.gz')
                input[3] = "homo_sapiens"
                input[4] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/Pfam-A.hmm.gz')
                input[5] = [
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3f'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3i'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3m'),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test_starfusion_dfam.hmm.h3p')
                ]
                input[6] = "https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/AnnotFilterRule.pm"
                """
            }
        }
    }

    test("homo_sapiens - single end") {

        config "./nextflow.config"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = STAR_ALIGN.out.junction
				input[1] = STARFUSION_BUILD.out.reference
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = STAR_ALIGN.out.junction
				input[1] = STARFUSION_BUILD.out.reference
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

}
